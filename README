Problem :

Program: Build Elevator system.
Input: 
1) No of lifts
2) No of floor
3) Passenger (n) travelling to floor, please note I can enter as many as passengers separated with space. Sample input: 1 4 2 6 3 1
Which means 
- Passenger 1 travelling to 4th floor
- passenger 2 travelling to 6th floor
- Passenger 3 travelling to 1st floor  
 
Assumption: All elevators are set to 0 on initialisation of program and continue to function from last floor number visited within the context of run-time.

Program should handle following scenarios:
1) Optimise the electricity and performance:  passenger standing on (n)th floor presses all the buttons for (n) lift. Program should identify which lift is in motion and the nearest one should be allocated.
2) Validations against the input 

Output: should print passenger and the lift allocated to respective passenger. Please note you might have scenario where only one lift caters to sample input (3).

Please create a program to solve the problem. Your solution will be assessed based on :

* Clear and Good object modeling - Clear and logical separation of responsibilities - (emphasis on single responsibility). Components should be named well. Each component should have a clear responsibility. Things not dumped in at one place
* For the solution, we request that you use Java, Python, JavaScript
* TDD practices: Unit tests, Integration tests - covering the key behavioral components. Tests should be simple, concise, and maintainable
* Easy to understand, extendable, not over-engineered code, include Readme
* Functional completion

-----------------------------------------------------------------------------------------------------------------------------
Solution :

The requirement of the Elevator Design Question contained a lot of inconsistencies, 
Therefore I have assumed a number of things to make the program work.

Assumptions are as follows :

1. In the input, user has to enter the currentfloor and destination floor of the passenger.
2. Only one elevator can be asssigned per passenger(person) (If we want multiple passengers per elevator, then we have to define a constant capacity)
3. Initially all elevators are at ground floor in this case 1
4. Priority is decided as follows to reduce how many times the elevator moves
    A. Closest to the elevator 
    B. Have small difference between current floor and destination floor
5. Elevator can move only one floor up/down in one count cycle
5. Cost is the total number of floors the elevators move
6. It takes one count cycle for a person to board the elevator


Structure of Classes and Responsibilities :

There are 4 classes:
1. Elevator : Handles the responsibility of Current_floor on which the elevator is, the person which is assigned to the elevator     
2. Person   : Handles the responsibility of a passenger including current floor of passenger, destination floor.
3. Driver   : This class simulates the whole application.
4. Main     : This is where main method resides. 


*to run the project from commandline, please use the jar and execute 
java -jar ElevatorProblem.jar *

or you can run Main.java which contains the main method.

******************************Sample Input/Output**************************************

********input**********************
Enter the number of test cases :
1
Enter the num of passengers :
1
Enter the number of Elevators :
1
Enter the Current floor of 1 passengers seperated by space :
0
Enter the Destination floor of 1 passengers seperated by space :
4
*********************************************************************

******output**********************************************

Person : Person [person_id=1, current_floor=0, dest_floor=4]
 is assigned elevator :  1
Counter : 4

*******************************************************************************************
